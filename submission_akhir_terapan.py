# -*- coding: utf-8 -*-
"""Submission_Akhir_Terapan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rG0kjDo4qdsfwgbYzJuElXWWsAQPokS4

# **Import Library**

Kode di bawah terdiri dari serangkaian pernyataan import yang membawa library dan modul spesifik untuk manipulasi data, visualisasi, dan machine learning. Dokumentasi :

- import pandas as pd: Mengimpor pustaka pandas untuk manipulasi dan analisis data, dengan alias pd.

- pd.set_option('display.max_columns', None): Mengatur agar semua kolom DataFrame ditampilkan saat dicetak, tidak terpotong.

- import numpy as np: Mengimpor pustaka numpy untuk perhitungan numerik dan operasi array, dengan alias np.

- from collections import Counter: Mengimpor fungsi Counter untuk menghitung frekuensi elemen dalam list atau iterable lainnya.

- import ast: Mengimpor modul ast untuk memproses dan mengevaluasi string Python sebagai objek Python asli, misalnya mengubah string daftar menjadi list.

- import matplotlib.pyplot as plt: Mengimpor matplotlib.pyplot sebagai plt untuk membuat visualisasi seperti grafik dan histogram.

- import seaborn as sns: Mengimpor seaborn sebagai sns, pustaka visualisasi yang dibangun di atas matplotlib dan lebih ramah statistik.

- from sklearn.compose import ColumnTransformer: Mengimpor ColumnTransformer dari scikit-learn untuk menerapkan transformasi berbeda pada kolom DataFrame.

- from sklearn.impute import SimpleImputer: Mengimpor SimpleImputer untuk mengisi nilai yang hilang (NaN) dengan strategi tertentu (seperti mean atau median).

- from sklearn.feature_extraction.text import TfidfVectorizer: Mengimpor TfidfVectorizer untuk mengubah data teks menjadi fitur numerik berbasis TF-IDF.

- from sklearn.metrics.pairwise import cosine_similarity: Mengimpor fungsi cosine_similarity untuk menghitung kemiripan antar vektor (biasanya vektor teks).
"""

# Import library manipulasi data dan numerik
import pandas as pd
import numpy as np
from collections import Counter
import ast

# Pengaturan tampilan DataFrame
pd.set_option('display.max_columns', None)

# Import library visualisasi
import matplotlib.pyplot as plt
import seaborn as sns

# Import library preprocessing dan ekstraksi fitur
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.feature_extraction.text import TfidfVectorizer

# Import fungsi untuk menghitung kemiripan antar vektor
from sklearn.metrics.pairwise import cosine_similarity

"""# **Upload Data dari Kaggle**

Kode pada bagian ini adalah serangkaian perintah yang digunakan di lingkungan Google Colab untuk mengunggah file kredensial Kaggle, mengunduh dataset dari Kaggle, mengekstrak file dataset, dan memuat serta menampilkan informasi dasar tentang dataset tersebut.

- from google.colab import files = Mengimpor modul files dari Google Colab untuk mengunggah file dari perangkat lokal

- files.upload() = Membuka dialog untuk mengunggah file, seperti kaggle.json untuk autentikasi Kaggle
"""

from google.colab import files
files.upload()

"""- mkdir -p ~/.kaggle = Membuat direktori .kaggle di sistem jika belum ada

- !cp kaggle.json ~/.kaggle/ = Menyalin file kaggle.json ke direktori .kaggle untuk autentikasi

- !chmod 600 ~/.kaggle/kaggle.json = Mengatur izin file kaggle.json agar hanya dapat diakses pemilik untuk keamanan
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Perintah !kaggle datasets download -d harits/anime-database-2022 digunakan untuk mengunduh dataset dari Kaggle bernama "anime-database-2022"
"""

!kaggle datasets download -d harits/anime-database-2022

"""Perintah !unzip -q anime-database-2022.zip -d dataset digunakan untuk mengekstrak file ZIP bernama anime-database-2022.zip ke dalam folder bernama dataset."""

!unzip -q anime-database-2022.zip -d dataset

"""Kode dibawh digunakan untuk membaca file CSV bernama Anime.csv yang berada di folder /content/dataset/, lalu memasukkannya ke dalam sebuah DataFrame bernama df menggunakan pustaka pandas. DataFrame ini akan digunakan untuk analisis dan manipulasi data selanjutnya."""

df = pd.read_csv('/content/dataset/Anime.csv')

"""# **Data Understanding**

Menampilkan informasi struktur DataFrame seperti jumlah baris, kolom, tipe data, dan nilai yang hilang
"""

df.info()

"""Menampilkan DataFrame"""

df.head(3)

"""Perintah df.describe() digunakan untuk menampilkan statistik deskriptif dari kolom-kolom numerik dalam DataFrame df"""

df.describe()

"""Kode ini mem-parsing string genre dari kolom Genres pada DataFrame dengan memisahkannya berdasarkan koma dan menghapus spasi. Daftar genre dari semua baris diratakan menjadi satu list. Selanjutnya, kode menghitung frekuensi kemunculan setiap genre menggunakan Counter dan memvisualisasikan 10 genre paling umum dalam bentuk bar chart horizontal."""

from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns

# Function to parse genre strings by splitting and stripping
def parse_genre_string(genre_str):
    if isinstance(genre_str, str):
        # Split by comma, strip whitespace, and filter out empty strings
        return [genre.strip() for genre in genre_str.split(',') if genre.strip()]
    return []

# Apply the parsing function and flatten the list of lists directly
# We are not creating a new column in the dataframe here
all_genres = [genre for genre_str in df['Genres'].dropna() for genre in parse_genre_string(genre_str)]

# Count the frequency of each genre
genre_counts = Counter(all_genres)

# Get the top 10 genres (or fewer if less than 10 unique genres)
top_genres = genre_counts.most_common(10)

if top_genres: # Check if top_genres is not empty
    genres, counts = zip(*top_genres)

    plt.figure(figsize=(10,6))
    sns.barplot(x=list(counts), y=list(genres), palette='viridis')
    plt.title('Top Genre Anime Terpopuler')
    plt.xlabel('Jumlah Anime')
    plt.ylabel('Genre')
    plt.show()
else:
    print("Tidak ada data genre yang ditemukan untuk divisualisasikan.")

"""# **Data Preparation**

Kode ini digunakan untuk menghapus kolom-kolom yang tidak diperlukan dari DataFrame, seperti judul anime secara umum (Title, Synonyms, Japanese), tanggal tayang (Start_Aired, End_Aired), sumber adaptasi, serta metrik popularitas lainnya. Tujuannya adalah untuk menyederhanakan dataset agar hanya menyisakan fitur-fitur yang relevan untuk proses analisis dan pemodelan sistem rekomendasi. Dalam konteks ini, kolom Title dihapus karena sistem hanya akan menggunakan kolom English sebagai acuan judul yang ditampilkan kepada pengguna, sehingga informasi judul dalam format lain dianggap tidak diperlukan.
"""

# Ambil hanya kolom yang dibutuhkan
df.drop(['Title', 'Synonyms', 'Japanese','Start_Aired', 'End_Aired','Broadcast','Licensors','Source','Themes','Duration_Minutes',
         'Scored_Users', 'Ranked','Members', 'Favorites','Popularity'],axis=1,inplace=True)
df.head(5)

"""Kode ini menghitung jumlah nilai null di setiap kolom DataFrame df menggunakan metode isnull().sum()."""

df.isnull().sum()

"""Kode ini menggunakan ColumnTransformer untuk menerapkan SimpleImputer dengan strategi median pada kolom Episodes dan Score, yang sering mengandung nilai kosong (null). Pendekatan ini menggantikan nilai-nilai kosong dengan nilai tengah (median) dari masing-masing kolom tersebut, yang lebih tahan terhadap outlier dibanding rata-rata. Sementara itu, kolom lainnya (ID, English, Synopsis, dll.) diteruskan tanpa perubahan melalui parameter remainder='passthrough'. Hasil transformasi dikonversi kembali menjadi sebuah DataFrame baru dengan urutan kolom yang sesuai."""

ct=ColumnTransformer(transformers=[("tf1",SimpleImputer(strategy='median'),['Episodes','Score'])],remainder='passthrough')
df=pd.DataFrame(ct.fit_transform(df),columns=['Episodes','Score','ID', 'English', 'Synopsis', 'Type',  'Status', 'Premiered',
       'Producers', 'Studios', 'Genres', 'Demographics', 'Rating'
       ],)
df.head(3)

"""Kode ini mengisi nilai kosong pada kolom Rating dengan modus atau nilai yang paling sering muncul. Pendekatan ini umum digunakan untuk data kategorikal agar tetap konsisten. Dengan inplace=True, perubahan langsung diterapkan ke DataFrame tanpa membuat salinan baru."""

# Rating - isi dengan modus
df['Rating'].fillna(df['Rating'].mode()[0], inplace=True)

"""Kode df.isna().sum() digunakan untuk menghitung jumlah nilai yang hilang (missing values atau NaN) di setiap kolom dalam DataFrame df. Hasilnya akan menunjukkan jumlah NaN per kolom, sehingga memudahkan identifikasi kolom mana yang masih memiliki data kosong dan perlu ditangani."""

df.isna().sum()

df.shape

"""Kode df.columns digunakan untuk menampilkan daftar semua nama kolom yang ada dalam DataFrame df. Disini bisa dillihat column apa saja yang tersedia setelah tadi beberapa column didrop"""

df.columns

"""Kode ini mengubah kolom Episodes, Score, dan Rating menjadi string, lalu mendefinisikan beberapa fungsi pemrosesan teks. Masing-masing fungsi memisahkan string berdasarkan spasi atau koma dan mengubahnya menjadi list, bertujuan untuk mempersiapkan data teks agar bisa diolah lebih lanjut"""

df['Episodes']=df['Episodes'].astype(str)
df['Score']=df['Score'].astype(str)
df['Rating']=df['Rating'].astype(str)
df['Demographics']=df['Demographics'].tolist()
def c(x):
    l=[]
    for i in x.split(' '):
        l.append(f"{i}")
    return l
def ch(x):
    l=[]
    for i in x.split(' '):
        l.append(f"{i}")
    return l
def pri(x):
    l=[]
    for i in x.split(' '):
        l.append(f" {i} ")
    return l
def tpe(x):
    l=[]
    for i in x.split(' '):
        l.append(f" {i}")
    return l
def st(x):
    l=[]
    for i in x.split(' '):
        l.append(f" {i}")
    return l
def de(x):
    l=[]
    for i in x.split(' '):
        l.append(f" {i}")
    return l
def std(x):
    l=[]
    for i in x.split(','):
        l.append(f"{i}")
    return l
def gen(x):
    l=[]
    for i in x.split(','):
        l.append(f" {i}")

    return l
def rat(x):
    l=[]
    for i in x.split(','):
        l.append(f" {i}")
    return l
def prod(x):
    l=[]
    for i in x.split(','):
        l.append(i)
    return l
def change(x):
    l=[]
    for i in x.split(','):
        l.append(i)
    return l

"""Kode ini menerapkan fungsi pemrosesan teks pada berbagai kolom dalam DataFrame. Setiap kolom diubah dari string menjadi list kata/frasa dengan memisahkan berdasarkan spasi atau koma. Tujuannya adalah untuk menyiapkan data dalam format list agar dapat digunakan untuk pemodelan berbasis teks yaitu TF-IDF atau content-based filtering.


"""

df['Synopsis']=df['Synopsis'].apply(change)
df['Type']=df['Type'].apply(tpe)
df['Status']=df['Status'].apply(st)
df['Premiered']=df['Premiered'].apply(pri)
df['Studios']=df['Studios'].apply(std)
df['Genres']=df['Genres'].apply(gen)
df['Rating']=df['Rating'].apply(rat).tolist()
df['Producers']=df['Producers'].apply(prod)
df['Demographics']=df['Demographics'].apply(de)
df['Episodes']=df['Episodes'].apply(ch)
df['Score']=df['Score'].apply(c)

"""Kode ini memotong isi kolom Synopsis agar hanya menyimpan tiga elemen pertama dari setiap baris. Begitu juga, kolom Producers dipotong agar hanya menyimpan dua elemen pertama. Tujuannya adalah mereduksi informasi yang terlalu panjang agar tetap relevan dan efisien untuk proses rekomendasi."""

df['Synopsis']=df['Synopsis'].apply(lambda x: x[:3])
df['Producers']=df['Producers'].apply(lambda x: x[:2])
df.head(3)

"""Kode ini membersihkan isi beberapa kolom list dengan menghapus tanda koma , dari Synopsis, dan menghapus spasi " " dari kolom lainnya (Type, Status, Premiered, Studios, Genres, Rating, Producers). Tujuannya adalah untuk normalisasi teks agar konsisten dan siap digunakan dalam analisis atau pemodelan berbasis teks."""

df['Synopsis']=df['Synopsis'].apply(lambda x:[i.replace(",",'') for i in x] )
df['Type']=df['Type'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Status']=df['Status'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Premiered']=df['Premiered'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Studios']=df['Studios'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Genres']=df['Genres'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Rating']=df['Rating'].apply(lambda x:[i.replace(" ",'') for i in x] )
df['Producers']=df['Producers'].apply(lambda x:[i.replace(" ",'') for i in x] )
df.head(3)

"""Kode ini menggabungkan beberapa kolom teks yang telah dibersihkan (berbentuk list) ke dalam satu kolom baru bernama About. Tujuannya adalah menyatukan informasi penting dari berbagai fitur untuk membentuk representasi konten yang lengkap, yang nantinya akan digunakan dalam content-based recommendation."""

df['About']=  df['Synopsis']+df['Genres'] + df['Premiered'] + df['Producers'] + df['Status'] + df['Studios'] + df['Type']+df['Episodes']+df['Score']+df['Demographics']+df['Rating']

"""Kode ini menghapus kolom-kolom asli yang sudah digabung ke dalam kolom About. Tujuannya adalah merapikan DataFrame dan menghindari duplikasi data karena semua informasi penting kini telah disatukan dalam kolom About."""

df.drop(['Synopsis','Type','Status','Premiered','Producers','Studios','Genres','Demographics','Rating','Episodes','Score'],axis=1,inplace=True)

"""Kode ini mengganti nama kolom English menjadi Title. Tujuannya adalah menyederhanakan nama kolom agar lebih deskriptif dan konsisten dengan konteks sistem rekomendasi, di mana judul anime biasanya disebut Title.


"""

df.rename(columns={'English': 'Title'}, inplace=True)

df

"""Kode ini mengubah setiap list dalam kolom About menjadi satu string teks dengan cara menggabungkan elemen-elemennya menggunakan spasi. Ini dilakukan agar data siap diproses oleh algoritma berbasis teks seperti TF-IDF.


"""

df['About']=df['About'].apply(lambda x: " ".join(x))

df.head(1)['About'].values

"""# **Modeling**

Kode ini menginisialisasi TfidfVectorizer untuk menghitung nilai TF-IDF dari teks di kolom About, yang berisi gabungan informasi sinopsis, genre, studio, dll. Fungsi fit_transform() memproses teks dan mengubahnya menjadi matriks numerik berdasarkan frekuensi kata yang sudah ditimbang dengan IDF. Hasilnya disimpan dalam vectors
"""

tfidf = TfidfVectorizer(max_features=5000, stop_words='english')
vectors = tfidf.fit_transform(df['About']).toarray()

"""Kode ini berisi array angka yang merepresentasikan bobot TF-IDF dari kata-kata penting (fitur) dalam deskripsi anime pertama (df.iloc[0]['About']). Setiap nilai menunjukkan seberapa penting kata tersebut dalam dokumen tersebut relatif terhadap semua dokumen lainnya.


"""

vectors[0]

"""Kode dibawa ini merupakan untuk menampilkan array 2 dimensi (matrix) di mana setiap baris mewakili satu anime, dan setiap kolom mewakili satu kata penting (fitur) dari seluruh korpus teks. Nilainya adalah bobot TF-IDF untuk kata tersebut dalam deskripsi anime tersebut."""

vectors

"""Perintah cosine_sim = cosine_similarity(tfidf_matrix) menghitung kemiripan kosinus antar anime berdasarkan matriks TF-IDF yang telah dihitung sebelumnya."""

cosine_sim = cosine_similarity(vectors)
cosine_sim

"""Kode ini digunakan untuk mencari 10 anime yang paling mirip dengan anime pertama berdasarkan nilai cosine similarity. Nilai kemiripan ini dihitung dari representasi teks menggunakan TF-IDF. Setelah semua skor kemiripan didapat, data diurutkan dari yang paling mirip, lalu diambil 10 teratas (tanpa menyertakan anime itu sendiri) sebagai rekomendasi."""

sorted(list(enumerate(cosine_sim[0])),reverse=True,key=lambda x:x[1])[1:11]

"""# **Mendapatkan Rekomendasi**

Fungsi anime_recommendations memberikan rekomendasi anime berdasarkan kemiripan genre dengan anime yang diberikan. Fungsi ini mencari k anime teratas yang paling mirip menggunakan matriks kemiripan kosinus, menghapus anime yang dicari, dan mengembalikan informasi tentang anime tersebut beserta genre-nya. Hasilnya adalah daftar anime yang memiliki genre serupa dengan anime input.
"""

def anime_recommendations(input_anime, k=10):
    # Cari index dari anime input
    index = df[df['Title'] == input_anime].index[0]
    # Hitung skor kesamaan dengan semua anime lain
    similarity_scores = list(enumerate(cosine_sim[index]))
    # Urutkan skor dari tertinggi ke terendah (kecuali diri sendiri)
    sorted_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)[1:k+1]
    # Ambil judul dari hasil urutan
    recommended_titles = [df.iloc[i[0]].Title for i in sorted_scores]
    return recommended_titles

"""Kode ini digunakan untuk menampilkan 10 rekomendasi anime yang mirip dengan anime Naruto. Pertama, variabel input_anime diisi dengan string 'Naruto' sebagai input judul anime dari pengguna. Kemudian, fungsi anime_recommendations dipanggil dengan argumen k=10, yang berarti sistem akan mengembalikan 10 anime paling mirip berdasarkan skor kesamaan konten. Hasil rekomendasi disimpan dalam variabel recommendations dan ditampilkan."""

input_anime ='Naruto'
recommendations = anime_recommendations(input_anime, k=10)
recommendations

"""# **Evaluasi**

Kode dibawah digunakan untuk memvisualisasikan distribusi skor cosine similarity antara anime Naruto dan seluruh anime lainnya dalam dataset. Pertama, kode mengambil indeks dari anime Naruto di DataFrame, lalu mengekstrak nilai kemiripan dari matriks cosine_sim. Histogram yang dihasilkan menggambarkan seberapa banyak anime yang memiliki tingkat kemiripan tertentu terhadap Naruto. Dengan 50 bin, grafik ini membantu melihat apakah mayoritas anime memiliki kemiripan rendah atau tinggi terhadap Naruto, yang berguna untuk mengevaluasi sebaran dan efektivitas sistem rekomendasi berbasis konten.
"""

import seaborn as sns
import matplotlib.pyplot as plt

input_idx = df[df['Title'] == 'Naruto'].index[0]
similarities = cosine_sim[input_idx]
sns.histplot(similarities, bins=50)
plt.title('Distribusi Cosine Similarity')
plt.xlabel('Similarity Score')
plt.ylabel('Jumlah Anime')
plt.show()